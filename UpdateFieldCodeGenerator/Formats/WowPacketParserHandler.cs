using System.Reflection;

namespace UpdateFieldCodeGenerator.Formats
{
    public class WowPacketParserHandler : UpdateFieldHandlerBase
    {
        private const string ModuleName = "V11_0_0_55666";
        private const string Version = "V11_0_7_58123";

        private List<string> _optionalInitVariables;

        public WowPacketParserHandler() : base(new StreamWriter("UpdateFieldsHandler.cs"), null)
        {
        }

        public override void BeforeStructures()
        {
            WriteAutogeneratedDisclaimer(_source);
            _source.WriteLine("using System.CodeDom.Compiler;");
            _source.WriteLine("using System.Collections;");
            _source.WriteLine("using System.Linq;");
            _source.WriteLine("using WowPacketParser.Enums;");
            _source.WriteLine("using WowPacketParser.Misc;");
            _source.WriteLine("using WowPacketParser.Parsing.Parsers;");
            _source.WriteLine("using WowPacketParser.Store.Objects.UpdateFields;");
            _source.WriteLine();
            _source.WriteLine($"namespace WowPacketParserModule.{ModuleName}.UpdateFields.{Version}");
            _source.WriteLine("{");
            _source.WriteLine($"    [GeneratedCode(\"UpdateFieldCodeGenerator.Formats.WowPacketParserHandler\", \"{Assembly.GetExecutingAssembly().GetName().Version}\")]");
            _source.WriteLine("    public class UpdateFieldHandler : UpdateFieldsHandlerBase");
            _source.WriteLine("    {");
        }

        public override void AfterStructures()
        {
            _source.WriteLine("    }");
            _source.WriteLine("}");
        }

        public override void OnStructureBegin(Type structureType, ObjectType objectType, bool create, bool writeUpdateMasks)
        {
            base.OnStructureBegin(structureType, objectType, create, writeUpdateMasks);
            _optionalInitVariables = new List<string>();

            var structureName = RenameType(structureType);

            if (_create)
            {
                _header = new StreamWriter($"{structureName}.cs");
                WriteAutogeneratedDisclaimer(_header);
                _header.WriteLine("using System.CodeDom.Compiler;");
                _header.WriteLine("using WowPacketParser.Misc;");
                _header.WriteLine("using WowPacketParser.Store.Objects.UpdateFields;");
                _header.WriteLine();
                _header.WriteLine($"namespace WowPacketParserModule.{ModuleName}.UpdateFields.{Version}");
                _header.WriteLine("{");
                _header.WriteLine($"    [GeneratedCode(\"UpdateFieldCodeGenerator.Formats.WowPacketParserHandler\", \"{Assembly.GetExecutingAssembly().GetName().Version}\")]");
                var interfaceName = HasMutableInterface(structureType) ? $"IMutable{structureName}" : $"I{structureName}";
                _header.WriteLine($"    public class {structureName} : {interfaceName}");
                _header.WriteLine("    {");
            }

            var methodType = _isRoot ? "override" : "static";

            _indent = 2;
            if (_create)
            {
                if (_isRoot)
                    _source.WriteLine($"{GetIndent()}public {methodType} I{structureName} ReadCreate{structureName}(Packet packet, UpdateFieldFlag flags, params object[] indexes)");
                else
                    _source.WriteLine($"{GetIndent()}public {methodType} I{structureName} ReadCreate{structureName}(Packet packet, params object[] indexes)");
            }
            else
                _source.WriteLine($"{GetIndent()}public {methodType} I{structureName} ReadUpdate{structureName}(Packet packet, params object[] indexes)");

            _source.WriteLine($"{GetIndent()}{{");
            _indent = 3;
            _source.WriteLine($"{GetIndent()}var data = new {structureName}();");
        }

        public override void OnStructureEnd(bool needsFlush, bool forceMaskMask)
        {
            if (_create)
            {
                _header.WriteLine("    }");
                _header.WriteLine("}");
                _header.WriteLine();
                _header.Close();
                _header = null;
            }

            _source.WriteLine($"{GetIndent()}packet.ResetBitReader();");

            if (!_create && _writeUpdateMasks)
            {
                ++_bitCounter;
                var maskBlocks = (_bitCounter + 31) / 32;
                _source.WriteLine($"{GetIndent()}var rawChangesMask = new int[{maskBlocks}];");
                if (maskBlocks > 1 || forceMaskMask)
                {
                    _source.WriteLine($"{GetIndent()}var rawMaskMask = new int[{(maskBlocks + 31) / 32}];");
                    if (maskBlocks > 32)
                    {
                        _source.WriteLine($"{GetIndent()}for (var i = 0; i < {maskBlocks / 32}; ++i)");
                        _source.WriteLine($"{GetIndent()}    rawMaskMask[i] = packet.ReadInt32();");
                        if ((maskBlocks % 32) != 0)
                            _source.WriteLine($"{GetIndent()}rawMaskMask[{maskBlocks / 32}] = (int)packet.ReadBits({maskBlocks % 32});");
                    }
                    else
                        _source.WriteLine($"{GetIndent()}rawMaskMask[0] = (int)packet.ReadBits({maskBlocks});");

                    _source.WriteLine($"{GetIndent()}var maskMask = new BitArray(rawMaskMask);");
                    if (maskBlocks > 1)
                    {
                        _source.WriteLine($"{GetIndent()}for (var i = 0; i < {maskBlocks}; ++i)");
                        _source.WriteLine($"{GetIndent()}    if (maskMask[i])");
                        _source.WriteLine($"{GetIndent()}        rawChangesMask[i] = (int)packet.ReadBits(32);");
                    }
                    else
                    {
                        _source.WriteLine($"{GetIndent()}if (maskMask[0])");
                        _source.WriteLine($"{GetIndent()}    rawChangesMask[0] = (int)packet.ReadBits(32);");
                    }
                }
                else
                    _source.WriteLine($"{GetIndent()}rawChangesMask[0] = (int)packet.ReadBits({_bitCounter});");

                _source.WriteLine($"{GetIndent()}var changesMask = new BitArray(rawChangesMask);");
                _source.WriteLine();
            }

            PostProcessFieldWrites();

            if (!_create)
            {
                foreach (var dynamicChangesMaskType in _dynamicChangesMaskTypes)
                {
                    var typeName = RenameType(dynamicChangesMaskType);
                    _source.WriteLine($"{GetIndent()}var no{typeName}ChangesMask = packet.ReadBit();");
                }
            }

            foreach (var optionalInitVariable in _optionalInitVariables)
                _source.WriteLine($"{GetIndent()}var has{optionalInitVariable}");

            List<FlowControlBlock> previousFlowControl = null;
            foreach (var (_, _, Write) in _fieldWrites)
                previousFlowControl = Write(previousFlowControl);

            _source.WriteLine($"{GetIndent()}return data;");

            _indent = 2;
            _source.WriteLine($"{GetIndent()}}}");
            _source.WriteLine();
            _source.Flush();
        }

        public override IReadOnlyList<FlowControlBlock> OnField(string name, UpdateField updateField, IReadOnlyList<FlowControlBlock> previousControlFlow)
        {
            name = RenameField(name);

            var flowControl = new List<FlowControlBlock>();
            if (_create && updateField.Flag != UpdateFieldFlag.None)
                flowControl.Add(new FlowControlBlock { Statement = $"if ((flags & {updateField.Flag.ToFlagsExpression(" | ", "UpdateFieldFlag.", "", "(", ")")}) != UpdateFieldFlag.None)" });

            var type = updateField.Type;
            var outputFieldName = updateField.SizeForField != null ? string.Format(name, "") : name;
            var nextIndex = string.Empty;
            var declarationType = updateField.Type;
            var declarationSettable = true;
            var arrayLoopBlockIndex = -1;
            var indexLetter = 'i';
            if (type.IsArray)
            {
                flowControl.Add(new FlowControlBlock { Statement = $"for (var {indexLetter} = 0; {indexLetter} < {updateField.Size}; ++{indexLetter})" });

                if (updateField.SizeForField != null)
                    outputFieldName = string.Format(name, $"[{indexLetter}]");
                else
                    outputFieldName += $"[{indexLetter}]";

                type = type.GetElementType();
                nextIndex += ", " + indexLetter;
                declarationSettable = false;
                arrayLoopBlockIndex = flowControl.Count;
                ++indexLetter;
            }
            if (typeof(DynamicUpdateField).IsAssignableFrom(type))
            {
                flowControl.Add(new FlowControlBlock { Statement = $"for (var {indexLetter} = 0; {indexLetter} < data.{outputFieldName}.Count; ++{indexLetter})" });
                if (!_create)
                    flowControl.Add(new FlowControlBlock { Statement = $"if (data.{outputFieldName}.UpdateMask[{indexLetter}])" });

                outputFieldName += $"[{indexLetter}]";
                type = type.GenericTypeArguments[0];
                nextIndex += ", " + indexLetter;
                declarationSettable = false;
                ++indexLetter;
            }
            if (typeof(BlzVectorField).IsAssignableFrom(type))
            {
                flowControl.Add(new FlowControlBlock { Statement = $"for (var {indexLetter} = 0; {indexLetter} < data.{outputFieldName}.Length; ++{indexLetter})" });
                outputFieldName += $"[{indexLetter}]";
                type = type.GenericTypeArguments[0];
                nextIndex += ", " + indexLetter;
                declarationType = type.MakeArrayType();
                ++indexLetter;
            }
            if (typeof(BlzOptionalField).IsAssignableFrom(type))
            {
                flowControl.Add(new FlowControlBlock { Statement = $"if (has{name})" });
                type = type.GenericTypeArguments[0];
                declarationType = type;
                if (updateField.SizeForField == null)
                {
                    var initVar = $"{name} = false;";
                    if (updateField.Type.IsArray)
                        initVar = $"{name}[] = new bool[{updateField.Size}];";

                    _optionalInitVariables.Add(initVar);
                }

            }
            if (typeof(Bits).IsAssignableFrom(type))
            {
                declarationType = typeof(uint);
            }

            if (!_create && _writeUpdateMasks)
            {
                GenerateBitIndexConditions(updateField, name, flowControl, previousControlFlow, arrayLoopBlockIndex);
                if (name.EndsWith("has_value()"))
                {
                    if (_blockGroupSize > 0)
                        flowControl.RemoveAt(1); // bit generated but not checked for has_value
                    else
                        flowControl.RemoveAt(0);
                }
            }

            foreach (var (fieldToCompare, operatorAndConstant) in updateField.Conditions)
                flowControl.Add(new FlowControlBlock { Statement = $"if (data.{RenameField(fieldToCompare.Name)} {operatorAndConstant})" });

            Type interfaceType = null;
            if (updateField.SizeForField != null)
            {
                type = (updateField.SizeForField.GetValue(null) as UpdateField).Type;
                if (type.IsArray)
                    type = type.GetElementType();
                if (type.GenericTypeArguments.Length > 0)
                    type = type.GenericTypeArguments[0];
                interfaceType = TypeHandler.ConvertToInterfaces(type, RenameType, _writeUpdateMasks);
            }

            if (updateField.CustomFlag.HasFlag(CustomUpdateFieldFlag.HasDynamicChangesMask))
                RegisterDynamicChangesMaskFieldType(type);

            _fieldWrites.Add((name, false, (pcf) =>
            {
                WriteControlBlocks(_source, flowControl, pcf);
                WriteField(name, outputFieldName, type, updateField.BitSize, nextIndex, interfaceType);
                _indent = 3;
                return flowControl;
            }
            ));

            if (_create && updateField.SizeForField == null && declarationType.GetCustomAttribute<DontStoreInWowPacketParserAttribute>() == null)
                WriteFieldDeclaration(name, updateField, declarationType, declarationSettable);

            return flowControl;
        }

        public override IReadOnlyList<FlowControlBlock> OnDynamicFieldSizeCreate(string name, UpdateField updateField, IReadOnlyList<FlowControlBlock> previousControlFlow)
        {
            name = RenameField(name);
            var flowControl = new List<FlowControlBlock>();
            if (_create && updateField.Flag != UpdateFieldFlag.None)
                flowControl.Add(new FlowControlBlock { Statement = $"if ((flags & {updateField.Flag.ToFlagsExpression(" | ", "UpdateFieldFlag.", "", "(", ")")}) != UpdateFieldFlag.None)" });

            var nameUsedToWrite = name;
            if (updateField.Type.IsArray)
            {
                flowControl.Add(new FlowControlBlock { Statement = $"for (var i = 0; i < {updateField.Size}; ++i)" });
                nameUsedToWrite += "[i]";
            }

            _fieldWrites.Add((name, true, (pcf) =>
            {
                WriteControlBlocks(_source, flowControl, pcf);
                if (updateField.BitSize > 0)
                    _source.WriteLine($"{GetIndent()}data.{nameUsedToWrite}.Resize(packet.ReadBits({updateField.BitSize}));");
                else
                    _source.WriteLine($"{GetIndent()}data.{nameUsedToWrite}.Resize(packet.ReadUInt32());");
                _indent = 3;
                return flowControl;
            }
            ));
            return flowControl;
        }

        public override IReadOnlyList<FlowControlBlock> OnDynamicFieldSizeUpdate(string name, UpdateField updateField, IReadOnlyList<FlowControlBlock> previousControlFlow)
        {
            name = RenameField(name);
            var flowControl = new List<FlowControlBlock>();
            if (_create && updateField.Flag != UpdateFieldFlag.None)
                flowControl.Add(new FlowControlBlock { Statement = $"if ((flags & {updateField.Flag.ToFlagsExpression(" | ", "UpdateFieldFlag.", "", "(", ")")}) != UpdateFieldFlag.None)" });

            var nameUsedToWrite = name;
            var arrayLoopBlockIndex = -1;
            if (updateField.Type.IsArray)
            {
                flowControl.Add(new FlowControlBlock { Statement = $"for (var i = 0; i < {updateField.Size}; ++i)" });
                nameUsedToWrite += "[i]";
                arrayLoopBlockIndex = flowControl.Count;
            }

            if (_writeUpdateMasks)
                GenerateBitIndexConditions(updateField, name, flowControl, previousControlFlow, arrayLoopBlockIndex);

            _fieldWrites.Add((name, true, (pcf) =>
            {
                WriteControlBlocks(_source, flowControl, pcf);
                var bitCountArgument = updateField.BitSize > 0 ? ", " + updateField.BitSize : "";
                _source.WriteLine($"{GetIndent()}data.{nameUsedToWrite}.ReadUpdateMask(packet{bitCountArgument});");
                _indent = 3;
                return flowControl;
            }
            ));
            return flowControl;
        }

        public override IReadOnlyList<FlowControlBlock> OnOptionalFieldInitCreate(string name, UpdateField updateField, IReadOnlyList<FlowControlBlock> previousControlFlow)
        {
            name = RenameField(name);
            var flowControl = new List<FlowControlBlock>();
            if (_create && updateField.Flag != UpdateFieldFlag.None)
                flowControl.Add(new FlowControlBlock { Statement = $"if ((flags & {updateField.Flag.ToFlagsExpression(" | ", "UpdateFieldFlag.", "", "(", ")")}) != UpdateFieldFlag.None)" });

            var initVar = $"{name} = false;";
            if (updateField.Type.IsArray)
            {
                flowControl.Add(new FlowControlBlock { Statement = $"for (var i = 0; i < {updateField.Size}; ++i)" });
                initVar = $"{name}[] = new bool[{updateField.Size}];";
            }

            _optionalInitVariables.Add(initVar);

            _fieldWrites.Add((name, true, (pcf) =>
            {
                WriteControlBlocks(_source, flowControl, pcf);
                _source.WriteLine($"{GetIndent()}has{name} = packet.ReadBit(\"Has{name}\", indexes);");
                _indent = 3;
                return flowControl;
            }
            ));
            return flowControl;
        }

        public override IReadOnlyList<FlowControlBlock> OnOptionalFieldInitUpdate(string name, UpdateField updateField, IReadOnlyList<FlowControlBlock> previousControlFlow)
        {
            name = RenameField(name);
            var flowControl = new List<FlowControlBlock>();

            var arrayLoopBlockIndex = -1;
            var initVar = $"{name} = false;";
            if (updateField.Type.IsArray)
            {
                flowControl.Add(new FlowControlBlock { Statement = $"for (var i = 0; i < {updateField.Size}; ++i)" });
                arrayLoopBlockIndex = flowControl.Count;
                initVar = $"{name}[] = new bool[{updateField.Size}];";
            }

            if (_writeUpdateMasks)
            {
                GenerateBitIndexConditions(updateField, name, flowControl, previousControlFlow, arrayLoopBlockIndex);
                flowControl.RemoveAt(1); // bit generated but not checked for has_value
            }

            _optionalInitVariables.Add(initVar);

            _fieldWrites.Add((name, true, (pcf) =>
            {
                WriteControlBlocks(_source, flowControl, pcf);
                _source.WriteLine($"{GetIndent()}has{name} = packet.ReadBit(\"Has{name}\", indexes);");
                _indent = 3;
                return flowControl;
            }
            ));
            return flowControl;
        }

        private void GenerateBitIndexConditions(UpdateField updateField, string name, List<FlowControlBlock> flowControl, IReadOnlyList<FlowControlBlock> previousControlFlow, int arrayLoopBlockIndex)
        {
            var newField = false;
            var nameForIndex = updateField.SizeForField != null ? RenameField(updateField.SizeForField.Name) : name;
            if (!_fieldBitIndex.TryGetValue(nameForIndex, out var bitIndex))
            {
                bitIndex = new List<int>();
                if (flowControl.Count == 0 || !FlowControlBlock.AreChainsAlmostEqual(previousControlFlow, flowControl)
                    || updateField.CustomFlag.HasFlag(CustomUpdateFieldFlag.ForceNewBlockBit))
                {
                    if (!updateField.Type.IsArray)
                    {
                        ++_nonArrayBitCounter;
                        if (_nonArrayBitCounter == _blockGroupSize)
                        {
                            _blockGroupBit = ++_bitCounter;
                            _nonArrayBitCounter = 1;
                        }
                    }

                    bitIndex.Add(++_bitCounter);

                    if (!updateField.Type.IsArray && _blockGroupSize > 0)
                        bitIndex.Add(_blockGroupBit);
                }
                else
                {
                    if (_previousFieldCounters == null || _previousFieldCounters.Count == 1)
                        throw new Exception("Expected previous field to have been an array");

                    bitIndex.Add(_previousFieldCounters[0]);
                }

                _fieldBitIndex[nameForIndex] = bitIndex;
                newField = true;
            }

            if (updateField.Type.IsArray)
            {
                flowControl.Insert(0, new FlowControlBlock { Statement = $"if (changesMask[{bitIndex[0]}])" });
                var bitsToGenerate = updateField.Size;
                var conditionIncrement = " + i";
                if (typeof(DynamicUpdateField).IsAssignableFrom(updateField.Type.GetElementType()))
                {
                    bitsToGenerate = 1;
                    conditionIncrement = string.Empty;
                }
                if (updateField.CustomFlag.HasFlag(CustomUpdateFieldFlag.NoArrayElementBits))
                    bitsToGenerate = 0;

                if (newField)
                {
                    bitIndex.AddRange(Enumerable.Range(_bitCounter + 1, bitsToGenerate));
                    _bitCounter += bitsToGenerate;
                }
                if (bitsToGenerate > 0)
                    flowControl.Insert(arrayLoopBlockIndex + 1, new FlowControlBlock { Statement = $"if (changesMask[{bitIndex[1]}{conditionIncrement}])" });
            }
            else
            {
                if (_blockGroupSize > 0)
                {
                    flowControl.Insert(0, new FlowControlBlock { Statement = $"if (changesMask[{bitIndex[1]}])" });
                    flowControl.Insert(1, new FlowControlBlock { Statement = $"if (changesMask[{bitIndex[0]}])" });
                }
                else
                    flowControl.Insert(0, new FlowControlBlock { Statement = $"if (changesMask[{bitIndex[0]}])" });
            }

            _previousFieldCounters = bitIndex;
        }

        private void WriteField(string name, string outputFieldName, Type type, int bitSize, string nextIndex, Type interfaceType)
        {
            _source.Write(GetIndent());
            if (name.EndsWith("size()"))
            {
                outputFieldName = outputFieldName.Substring(0, outputFieldName.Length - 6);
                var interfaceName = RenameType(TypeHandler.GetFriendlyName(interfaceType));
                if (_create || !_isRoot || type == typeof(string))
                {
                    var sizeReadExpression = bitSize > 0 ? $"packet.ReadBits({bitSize})" : "packet.ReadUInt32()";
                    if (type != typeof(string))
                        _source.WriteLine($"data.{outputFieldName} = new {interfaceName}[{sizeReadExpression}];");
                    else
                        _source.WriteLine($"data.{outputFieldName} = new string('*', (int){sizeReadExpression});");
                }
                else
                    _source.WriteLine($"data.{outputFieldName} = Enumerable.Range(0, (int)packet.ReadBits(32)).Select(x => new {RenameType(TypeHandler.GetFriendlyName(type))}()).Cast<{interfaceName}>().ToArray();");
                return;
            }

            if (name.EndsWith("has_value()"))
            {
                outputFieldName = outputFieldName.Substring(0, outputFieldName.Length - 12);
                _source.WriteLine($"has{outputFieldName} = packet.ReadBit(\"Has{outputFieldName}\", indexes);");
                return;
            }

            switch (Type.GetTypeCode(type))
            {
                case TypeCode.Object:
                    if (type == typeof(WowGuid))
                        _source.WriteLine($"data.{outputFieldName} = packet.ReadPackedGuid128(\"{name}\", indexes{nextIndex});");
                    else if (type == typeof(Bits))
                        _source.WriteLine($"data.{outputFieldName} = packet.ReadBits(\"{name}\", {bitSize}, indexes{nextIndex});");
                    else if (type == typeof(Vector2))
                        _source.WriteLine($"data.{outputFieldName} = packet.ReadVector2(\"{name}\", indexes{nextIndex});");
                    else if (type == typeof(Vector3))
                        _source.WriteLine($"data.{outputFieldName} = packet.ReadVector3(\"{name}\", indexes{nextIndex});");
                    else if (type == typeof(Quaternion))
                        _source.WriteLine($"data.{outputFieldName} = packet.ReadQuaternion(\"{name}\", indexes{nextIndex});");
                    else if (type == typeof(DungeonScoreSummary))
                        _source.WriteLine($"Substructures.MythicPlusHandler.ReadDungeonScoreSummary(packet, indexes{nextIndex}, \"{name}\");");
                    else if (type == typeof(DungeonScoreData))
                        _source.WriteLine($"Substructures.MythicPlusHandler.ReadDungeonScoreData(packet, indexes{nextIndex}, \"{name}\");");
                    else if (type == typeof(ItemBonusKey))
                        _source.WriteLine($"Substructures.ItemHandler.ReadItemBonusKey(packet, indexes{nextIndex}, \"{name}\");");
                    else if (type == typeof(ItemInstance))
                        _source.WriteLine($"Substructures.ItemHandler.ReadItemInstance(packet, indexes{nextIndex}, \"{name}\");");
                    else if (type == typeof(ItemEnchantData))
                        _source.WriteLine($"Substructures.ItemHandler.ReadItemEnchantData(packet, indexes{nextIndex}, \"{name}\");");
                    else if (type == typeof(ItemGemData))
                        _source.WriteLine($"Substructures.ItemHandler.ReadItemGemData(packet, indexes{nextIndex}, \"{name}\");");
                    else if (type == typeof(PerksVendorItem))
                        _source.WriteLine($"Substructures.PerksProgramHandler.ReadPerksVendorItem(packet, indexes{nextIndex}, \"{name}\");");
                    else if (_create)
                        _source.WriteLine($"data.{outputFieldName} = ReadCreate{RenameType(type)}(packet, indexes, \"{name}\"{nextIndex});");
                    else
                    {
                        if (_dynamicChangesMaskTypes.Contains(type.Name))
                        {
                            _source.WriteLine($"if (no{RenameType(type.Name)}ChangesMask)");
                            _source.WriteLine($"{GetIndent()}    data.{outputFieldName} = ReadCreate{RenameType(type)}(packet, indexes, \"{name}\"{nextIndex});");
                            _source.WriteLine($"{GetIndent()}else");
                            _source.WriteLine($"{GetIndent()}    data.{outputFieldName} = ReadUpdate{RenameType(type)}(packet, indexes, \"{name}\"{nextIndex});");

                        }
                        else
                            _source.WriteLine($"data.{outputFieldName} = ReadUpdate{RenameType(type)}(packet, indexes, \"{name}\"{nextIndex});");
                    }
                    break;
                case TypeCode.Boolean:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadBit(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.SByte:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadSByte(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.Byte:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadByte(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.Int16:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadInt16(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.UInt16:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadUInt16(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.Int32:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadInt32(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.UInt32:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadUInt32(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.Int64:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadInt64(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.UInt64:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadUInt64(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.Single:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadSingle(\"{name}\", indexes{nextIndex});");
                    break;
                case TypeCode.String:
                    _source.WriteLine($"data.{outputFieldName} = packet.ReadWoWString(\"{name}\", data.{outputFieldName}.Length, indexes{nextIndex});");
                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(type));
            }
        }

        private void WriteFieldDeclaration(string name, UpdateField updateField, Type declarationType, bool declarationSettable)
        {
            declarationType = TypeHandler.ConvertToInterfaces(declarationType, rawName => RenameType(rawName), _writeUpdateMasks);
            _header.Write($"        public {TypeHandler.GetFriendlyName(declarationType)} {name} {{ get;{(declarationSettable ? " set;" : "")} }}");
            if (typeof(DynamicUpdateField).IsAssignableFrom(updateField.Type))
                _header.Write($" = new {TypeHandler.GetFriendlyName(declarationType)}();");
            else if (updateField.Type.IsArray)
            {
                var typeFormat = TypeHandler.GetFriendlyName(declarationType.GetElementType());
                _header.Write($" = new {typeFormat}[{updateField.Size}]");
                if (typeof(DynamicUpdateField).IsAssignableFrom(updateField.Type.GetElementType()))
                {
                    _header.Write($" {{ ");
                    for (var i = 0; i < updateField.Size; ++i)
                    {
                        if (i != 0)
                            _header.Write(", ");

                        _header.Write($"new {typeFormat}()");
                    }
                    _header.Write(" }");
                }
                _header.Write(";");
            }

            _header.WriteLine();
        }

        protected override string RenameType(Type type)
        {
            return RenameType(type.Name);
        }

        private string RenameType(string name)
        {
            if (name.StartsWith("CG") && char.IsUpper(name[2]))
                name = name.Substring(2);
            if (name.EndsWith("_C"))
                name = name.Substring(0, name.Length - 2);
            if (name.StartsWith("JamMirror"))
                name = name.Substring(9);
            return name;
        }

        protected override string RenameField(string name)
        {
            name = name.Replace("m_", "");
            if (name.Length == 0)
                return name;
            return char.ToUpperInvariant(name[0]) + name.Substring(1);
        }

        private static void WriteAutogeneratedDisclaimer(TextWriter output)
        {
            output.WriteLine("// <auto-generated>");
            output.WriteLine("// DO NOT EDIT");
            output.WriteLine("// </auto-generated>");
            output.WriteLine();
        }

        public override void FinishControlBlocks(IReadOnlyList<FlowControlBlock> previousControlFlow, string tag)
        {
            _fieldWrites.Add((RenameField(tag), false, (pcf) =>
            {
                FinishControlBlocks(_source, pcf);
                return new List<FlowControlBlock>();
            }));
        }

        public override void FinishBitPack(string tag)
        {
            _fieldWrites.Add((tag != null ? RenameField(tag) : "FinishBitPack", false, (pcf) =>
            {
                _source.WriteLine($"{GetIndent()}packet.ResetBitReader();");
                return pcf;
            }));
        }

        private bool HasMutableInterface(Type type)
        {
            return type.GetCustomAttribute<HasMutableInterfaceAttribute>() != null;
        }
    }
}
